#!/bin/bash

# Local development domain setup script
# Automates Apache virtual host configuration with SSL certificates

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
APACHE_VHOSTS_FILE="$HOME/dotfiles/apache/users/httpd-vhosts-custom.conf"
SSL_DIR="/private/etc/apache2/ssl"
HOSTS_FILE="/etc/hosts"

# Function to print colored output
print_color() {
	local color=$1
	shift
	echo -e "${color}$*${NC}"
}

# Function to show usage
usage() {
	cat <<EOF
Usage: $(basename "$0") COMMAND [OPTIONS]

Commands:
    add     Add a new local domain with SSL certificate
    remove  Remove a local domain and its SSL certificate
    list    List all configured local domains

Options for 'add':
    -d, --domain DOMAIN      Full domain name (e.g., myapp, cms.myapp)
    -p, --port PORT          Backend port number
    --https-backend          Use HTTPS for backend proxy (default: HTTP)
    --blazor                 Add Blazor WebSocket support

Examples:
    $(basename "$0") add -d myapp -p 3000
    $(basename "$0") add -d cms.myapp -p 5001 --https-backend --blazor
    $(basename "$0") add -d api.myapp -p 8080
    $(basename "$0") remove -d myapp
    $(basename "$0") remove -d cms.myapp
    $(basename "$0") list

EOF
	exit 1
}

# Function to check if running with sudo when needed
require_sudo() {
	if [[ $EUID -ne 0 ]]; then
		print_color "$RED" "This operation requires sudo privileges."
		exec sudo "$0" "$@"
	fi
}

# Function to add a new domain
add_domain() {
	local domain=""
	local port=""
	local https_backend=false
	local blazor=false

	# Parse arguments
	while [[ $# -gt 0 ]]; do
		case $1 in
		-d | --domain)
			domain="$2"
			shift 2
			;;
		-p | --port)
			port="$2"
			shift 2
			;;
		--https-backend)
			https_backend=true
			shift
			;;
		--blazor)
			blazor=true
			shift
			;;
		*)
			print_color "$RED" "Unknown option: $1"
			usage
			;;
		esac
	done

	# Validate required arguments
	if [[ -z "$domain" ]] || [[ -z "$port" ]]; then
		print_color "$RED" "Error: Domain and port are required"
		usage
	fi

	# Parse domain to extract base domain and subdomain
	local base_domain=""
	local subdomain=""
	local full_domain="$domain.test"

	if [[ "$domain" == *.* ]]; then
		# Has subdomain (e.g., cms.myapp)
		subdomain="${domain%%.*}"
		base_domain="${domain#*.}"
		full_domain="$domain.test"
	else
		# No subdomain (e.g., myapp)
		base_domain="$domain"
		full_domain="$domain.test"
	fi

	print_color "$BLUE" "Setting up local domain: $full_domain"

	# Step 1: Generate SSL certificate
	print_color "$YELLOW" "Generating SSL certificate..."
	if [[ ! -d "$SSL_DIR" ]]; then
		sudo mkdir -p "$SSL_DIR"
	fi

	# Use base domain for certificate (covers *.domain.test)
	local cert_domain="${base_domain}.test"
	sudo mkcert -key-file "$SSL_DIR/$cert_domain.key" \
		-cert-file "$SSL_DIR/$cert_domain.crt" \
		"*.$cert_domain" "$cert_domain"

	# Step 2: Add to /etc/hosts
	print_color "$YELLOW" "Adding to /etc/hosts..."
	if ! grep -q "$full_domain" "$HOSTS_FILE"; then
		echo "127.0.0.1 $full_domain" | sudo tee -a "$HOSTS_FILE" >/dev/null
		if [[ -z "$subdomain" ]]; then
			echo "127.0.0.1 www.$full_domain" | sudo tee -a "$HOSTS_FILE" >/dev/null
		fi
	else
		print_color "$YELLOW" "Domain already exists in /etc/hosts"
	fi

	# Step 3: Generate VirtualHost configuration
	print_color "$YELLOW" "Creating Apache VirtualHost configuration..."

	local backend_protocol="http"
	local ssl_proxy_config=""
	local blazor_config=""

	if [[ "$https_backend" == true ]]; then
		backend_protocol="https"
		ssl_proxy_config="
    # Enable SSL for the backend (Apache's connection to your app)
    SSLProxyEngine on
    SSLProxyVerify none
    SSLProxyCheckPeerCN off
    SSLProxyCheckPeerName off"
	fi

	if [[ "$blazor" == true ]]; then
		blazor_config="
    ProxyPassMatch      ^/_blazor/(.*) https://127.0.0.1:$port/_blazor/\$1
    ProxyPass           /_blazor wss://127.0.0.1:$port/_blazor"
	fi

	local vhost_config="

# $full_domain - Added by localdev script
<VirtualHost *:80>
    ServerName $full_domain"

	if [[ -z "$subdomain" ]]; then
		vhost_config+="
    ServerAlias www.$full_domain"
	fi

	vhost_config+="
    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:$port/
    ProxyPassReverse / http://127.0.0.1:$port/
</VirtualHost>
<VirtualHost *:443>
    ServerName $full_domain"

	if [[ -z "$subdomain" ]]; then
		vhost_config+="
    ServerAlias www.$full_domain"
	fi

	vhost_config+="

    ProxyPreserveHost On
    ProxyRequests Off
    ProxyPass / $backend_protocol://127.0.0.1:$port/
    ProxyPassReverse / $backend_protocol://127.0.0.1:$port/

    # Enable SSL for the frontend (the browser's connection to Apache)
    SSLEngine on
    SSLCertificateFile \"$SSL_DIR/$cert_domain.crt\"
    SSLCertificateKeyFile \"$SSL_DIR/$cert_domain.key\"$ssl_proxy_config$blazor_config
</VirtualHost>"

	# Append to Apache config file
	echo "$vhost_config" >>"$APACHE_VHOSTS_FILE"

	# Step 4: Flush DNS cache
	print_color "$YELLOW" "Flushing DNS cache..."
	sudo dscacheutil -flushcache
	sudo killall -HUP mDNSResponder 2>/dev/null || true

	# Step 5: Restart Apache
	print_color "$YELLOW" "Restarting Apache..."
	sudo apachectl restart

	print_color "$GREEN" "✓ Domain $full_domain successfully configured!"
	print_color "$GREEN" "  HTTP:  http://$full_domain"
	print_color "$GREEN" "  HTTPS: https://$full_domain"
	print_color "$GREEN" "  Backend: $backend_protocol://localhost:$port"
}

# Function to remove a domain
remove_domain() {
	local domain=""

	# Parse arguments
	while [[ $# -gt 0 ]]; do
		case $1 in
		-d | --domain)
			domain="$2"
			shift 2
			;;
		*)
			print_color "$RED" "Unknown option: $1"
			usage
			;;
		esac
	done

	if [[ -z "$domain" ]]; then
		print_color "$RED" "Error: Domain is required"
		usage
	fi

	# Parse domain to extract base domain
	local base_domain=""
	local full_domain="$domain.test"

	if [[ "$domain" == *.* ]]; then
		# Has subdomain (e.g., cms.myapp)
		base_domain="${domain#*.}"
	else
		# No subdomain (e.g., myapp)
		base_domain="$domain"
	fi

	print_color "$BLUE" "Removing local domain: $full_domain"

	# Remove from Apache config
	if [[ -f "$APACHE_VHOSTS_FILE" ]]; then
		# Create backup
		cp "$APACHE_VHOSTS_FILE" "$APACHE_VHOSTS_FILE.bak"

		# Remove the VirtualHost blocks for this domain
		sed -i '' "/# $full_domain - Added by localdev script/,/<\/VirtualHost>/d" "$APACHE_VHOSTS_FILE"
		print_color "$GREEN" "✓ Removed from Apache configuration"
	fi

	# Remove from /etc/hosts
	sudo sed -i '' "/$full_domain/d" "$HOSTS_FILE"
	print_color "$GREEN" "✓ Removed from /etc/hosts"

	# Remove SSL certificates if no other domains use them
	local cert_domain="${base_domain}.test"
	if ! grep -q "$cert_domain" "$APACHE_VHOSTS_FILE"; then
		sudo rm -f "$SSL_DIR/$cert_domain.crt" "$SSL_DIR/$cert_domain.key"
		print_color "$GREEN" "✓ Removed SSL certificates"
	fi

	# Restart Apache
	sudo apachectl restart
	print_color "$GREEN" "✓ Apache restarted"

	print_color "$GREEN" "Domain $full_domain has been removed!"
}

# Function to list configured domains
list_domains() {
	print_color "$BLUE" "Configured local domains:"
	echo

	if [[ -f "$APACHE_VHOSTS_FILE" ]]; then
		grep "ServerName.*\.test" "$APACHE_VHOSTS_FILE" |
			sed 's/.*ServerName //' |
			sort -u |
			while read -r domain; do
				# Find the port for this domain
				port=$(grep -A5 "ServerName $domain" "$APACHE_VHOSTS_FILE" |
					grep "ProxyPass /" |
					head -1 |
					sed 's/.*://;s/\/.*//')

				print_color "$GREEN" "  • $domain → localhost:$port"
			done
	else
		print_color "$YELLOW" "No Apache configuration file found at $APACHE_VHOSTS_FILE"
	fi

	echo
	print_color "$BLUE" "SSL Certificates:"
	if [[ -d "$SSL_DIR" ]]; then
		ls -1 "$SSL_DIR"/*.crt 2>/dev/null | while read -r cert; do
			basename "$cert" .crt | sed 's/^/  • /'
		done
	else
		print_color "$YELLOW" "No SSL certificates found"
	fi
}

# Main script logic
case "${1:-}" in
add)
	shift
	require_sudo "$@"
	add_domain "$@"
	;;
remove)
	shift
	require_sudo "$@"
	remove_domain "$@"
	;;
list)
	list_domains
	;;
*)
	usage
	;;
esac
